
# Plugins
# ───────

evaluate-commands %sh{
    plugins="$kak_config/plugins"
    mkdir -p "$plugins"
    [ ! -e "$plugins/plug.kak" ] && \
        git clone -q https://github.com/andreyorst/plug.kak.git "$plugins/plug.kak"
    printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}
# This is a prereqe for all of alexherbo's plugins
plug 'alexherbo2/prelude.kak'
plug "andreyorst/plug.kak" noload
plug "andreyorst/fzf.kak"
plug 'JJK96/kakoune-repl-send' %{
  # Suggested mapping
  # map global normal <backspace> ': repl-send<ret>'
}
plug "raiguard/one.kak" theme
plug "lePerdu/kakboard" %{
    hook global WinCreate .* %{ kakboard-enable }
}
plug 'delapouite/kakoune-palette'
plug 'matthias-margush/tug'
plug "andreyorst/kaktree" defer kaktree %{
    set-option global kaktree_double_click_duration '0.5'
    set-option global kaktree_indentation 1
    set-option global kaktree_dir_icon_open  '▾  '
    set-option global kaktree_dir_icon_close '▸  '
    set-option global kaktree_file_icon      '⠀⠀'
} config %{
    hook global WinSetOption filetype=kaktree %{
        remove-highlighter buffer/numbers
        remove-highlighter buffer/matching
        remove-highlighter buffer/wrap
        remove-highlighter buffer/show-whitespaces
    }
    kaktree-enable
}
plug "andreyorst/powerline.kak" defer powerline %{
    powerline-format global 'git bufname filetype mode_info line_column position'
} config %{
    powerline-start
}

# Language Servers
# ────────────────

# Be sure to install kak-lsp using brew and to create config files in .config
eval %sh{kak-lsp --kakoune -vvv -c $HOME/.config/kak-lsp/kak-lsp.toml -s $kak_session}
# For debugging: --log $HOME/.config/kak-lsp/kak-lsp.log
# Turn off lsp when we exit kak
hook global KakEnd .* lsp-exit
# Tell lsp to insert spaces instead of tabs
set-option global lsp_insert_spaces true

# User preference
# ───────────────

set-option global makecmd 'make -j8'
set-option global grepcmd 'ag --column'
set-option global ui_options terminal_status_on_top=true
hook global ModuleLoaded clang %{ set-option global clang_options -std=c++17 }

set-option global ui_options ncurses_set_title=true
set-option global ui_options ncurses_assistant=none
set global startup_info_version 99999999

colorscheme one-dark

add-highlighter global/ show-matching
add-highlighter global/ wrap
# add-highlighter -override global/ wrap

hook global RegisterModified '/' %{ add-highlighter -override global/search regex "%reg{/}" 0:+u }

hook global WinCreate ^[^*]+$ %{ add-highlighter window/ number-lines -hlcursor }

# Enable editor config
# ────────────────────

hook global BufOpenFile .* %{ editorconfig-load }
hook global BufNewFile .* %{ editorconfig-load }

# Filetype specific hooks
# ───────────────────────

hook global WinSetOption filetype=(julia|python) %{
    lsp-enable-window
}

hook global WinSetOption filetype=python %{
    jedi-enable-autocomplete
    # lint-enable
    # set-option global lintcmd 'flake8'
}

map -docstring "xml tag objet" global object t %{c<lt>([\w.]+)\b[^>]*?(?<lt>!/)>,<lt>/([\w.]+)\b[^>]*?(?<lt>!/)><ret>}

# Highlight the word under the cursor
# ───────────────────────────────────

set-face global CurWord default,rgba:80808040

hook global NormalIdle .* %{
    eval -draft %{ try %{
        exec <space><a-i>w <a-k>\A\w+\z<ret>
        add-highlighter -override global/curword regex "\b\Q%val{selection}\E\b" 0:CurWord
    } catch %{
        add-highlighter -override global/curword group
    } }
}

# Custom mappings
# ───────────────

map global normal = ':prompt math: %{exec "a%val{text}<lt>esc>|bc<lt>ret>"}<ret>'

# Various mappings
# ────────────────

map global normal '#' :comment-line<ret>

map global user -docstring 'next lint error' n ':lint-next-error<ret>'
map global normal <c-p> :lint<ret>

map global user -docstring 'gdb helper mode' g ':gdb-helper<ret>'
map global user -docstring 'gdb helper mode (repeat)' G ':gdb-helper-repeat<ret>'

map global user -docstring 'lsp mode' l ':enter-user-mode lsp<ret>'

hook global -always BufOpenFifo '\*grep\*' %{ map -- global normal - ': grep-next-match<ret>' }
hook global -always BufOpenFifo '\*make\*' %{ map -- global normal - ': make-next-error<ret>' }

# Enable <tab>/<s-tab> for insert completion selection
# ──────────────────────────────────────────────────────

hook global InsertCompletionShow .* %{ map window insert <tab> <c-n>; map window insert <s-tab> <c-p> }
hook global InsertCompletionHide .* %{ unmap window insert <tab> <c-n>; unmap window insert <s-tab> <c-p> }

# Helper commands
# ───────────────

define-command find -menu -params 1 -shell-script-candidates %{ ag -g '' --ignore "$kak_opt_ignored_files" } %{ edit %arg{1} }

# define-command mkdir %{ nop %sh{ mkdir -p $(dirname $kak_buffile) } }

# define-command ide -params 0..1 %{
#     try %{ rename-session %arg{1} }

#     rename-client main
#     set-option global jumpclient main

#     new rename-client tools
#     set-option global toolsclient tools

#     new rename-client docs
#     set-option global docsclient docs
# }

# define-command delete-buffers-matching -params 1 %{
#     evaluate-commands -buffer * %{
#         evaluate-commands %sh{ case "$kak_buffile" in $1) echo "delete-buffer" ;; esac }
#     }
# }

# declare-option -hidden str swap_buffer_target
# define-command swap-buffer-with -override -params 1 -client-completion %{
#     set-option global swap_buffer_target %val{bufname}
#     edit -scratch # release current window for other client
#     evaluate-commands -client %arg{1} "
#         set-option global swap_buffer_target %%val{bufname}
#         buffer %opt{swap_buffer_target}
#     "
#     delete-buffer # delete the temporary scratch buffer
#     buffer %opt{swap_buffer_target}
# }

# define-command -params .. fifo %{ evaluate-commands %sh{
#      output=$(mktemp -d "${TMPDIR:-/tmp}"/kak-fifo.XXXXXXXX)/fifo
#      mkfifo ${output}
#      ( eval "$@" > ${output} 2>&1 & ) > /dev/null 2>&1 < /dev/null

#      printf %s\\n "evaluate-commands -try-client '$kak_opt_toolsclient' %{
#                edit! -fifo ${output} *fifo*
#                hook -always -once buffer BufCloseFifo .* %{ nop %sh{ rm -r $(dirname ${output}) } }
#            }"
# }}


# Powerline one-dark colorscheme
# ──────────────────────────────

hook global ModuleLoaded powerline %{ require-module powerline_one_dark }

provide-module powerline_one_dark %§
set-option -add global powerline_themes "one-dark"

define-command -hidden powerline-theme-one-dark %{
    declare-option -hidden str powerline_color00 "rgb:636d83" # fg: bufname
    declare-option -hidden str powerline_color01 "rgb:373c47" # bg: position
    declare-option -hidden str powerline_color02 "rgb:636d83" # fg: git
    declare-option -hidden str powerline_color03 "rgb:373c47" # bg: bufname
    declare-option -hidden str powerline_color04 "rgb:373c47" # bg: git
    declare-option -hidden str powerline_color05 "rgb:636d83" # fg: position
    declare-option -hidden str powerline_color06 "rgb:636d83" # fg: line-column
    declare-option -hidden str powerline_color07 "rgb:636d83" # fg: mode-info
    declare-option -hidden str powerline_color08 "rgb:373c47" # base background
    declare-option -hidden str powerline_color09 "rgb:373c47" # bg: line-column
    declare-option -hidden str powerline_color10 "rgb:636d83" # fg: filetype
    declare-option -hidden str powerline_color11 "rgb:373c47" # bg: filetype
    declare-option -hidden str powerline_color12 "rgb:373c47" # bg: client
    declare-option -hidden str powerline_color13 "rgb:636d83" # fg: client
    declare-option -hidden str powerline_color14 "rgb:636d83" # fg: session
    declare-option -hidden str powerline_color15 "rgb:373c47" # bg: session
    
    declare-option -hidden str powerline_color16 "rgb:636d83" # unused
    declare-option -hidden str powerline_color17 "rgb:636d83" # unused
    declare-option -hidden str powerline_color18 "rgb:636d83" # unused
    declare-option -hidden str powerline_color19 "rgb:636d83" # unused
    declare-option -hidden str powerline_color20 "rgb:636d83" # unused
    declare-option -hidden str powerline_color21 "rgb:636d83" # unused
    declare-option -hidden str powerline_color22 "rgb:636d83" # unused
    declare-option -hidden str powerline_color23 "rgb:636d83" # unused
    declare-option -hidden str powerline_color24 "rgb:636d83" # unused
    declare-option -hidden str powerline_color25 "rgb:636d83" # unused
    declare-option -hidden str powerline_color26 "rgb:636d83" # unused
    declare-option -hidden str powerline_color27 "rgb:636d83" # unused
    declare-option -hidden str powerline_color28 "rgb:636d83" # unused
    declare-option -hidden str powerline_color29 "rgb:636d83" # unused
    declare-option -hidden str powerline_color30 "rgb:636d83" # unused
    declare-option -hidden str powerline_color31 "rgb:636d83" # unused

    declare-option -hidden str powerline_next_bg %opt{powerline_color08}
    declare-option -hidden str powerline_base_bg %opt{powerline_color08}
}

§

hook global ModuleLoaded powerline %{ powerline-theme one-dark }
hook global ModuleLoaded powerline %{ powerline-separator triangle }
